{"version":3,"sources":["redux/DetailsAction.ts","types/details.ts","components/Details.tsx","redux/reducer.ts","redux/store.ts","App.tsx","serviceWorker.js","index.tsx"],"names":["arrlang","getRepoLanguage","name","repoName","i","dispatch","a","axios","get","responseLanguage","data","type","data3","mapDispatchToProps","getName","event","target","value","getData","response","actionCreator","getRepo","response1","data1","console","log","arr","map","item","length","getContributionsData","responseContributions","contributionData","years","data2","connect","state","username","src","email","fullname","repo","followers","following","repoLanguageData","company","bio","location","props","labels","year","datasets","label","backgroundColor","hoverBackgroundColor","total","state1","Object","keys","values","state2","className","onSubmit","preventDefault","onChange","alt","options","title","display","text","fontSize","legend","position","index","key","href","html_url","description","forks_count","stargazers_count","initialState","reducer","action","login","avatar_url","store","createStore","applyMiddleware","thunk","App","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c10581e5.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport {FETCH_USER_DETAILS,FETCH_USER_NAME,ADD_REPO,CONTRIBUTION_DATA,REPO_LANGUAGE} from \"../types/details\";\r\nimport {appAction} from \"../types/details\";\r\n\r\nexport const getName = (name : string ):appAction => {\r\n  return {\r\n    type: FETCH_USER_NAME,\r\n    name: name,\r\n  };\r\n};\r\n\r\nexport const getData = (name : string) => {\r\n  return async (dispatch:any) => {\r\n    const response = await axios.get(`https://api.github.com/users/${name}`);\r\n    dispatch({\r\n      type: FETCH_USER_DETAILS,\r\n      data: response.data,\r\n    });\r\n  };\r\n};\r\n\r\nexport const getRepo =(name : string) => \r\n  async(dispatch:any) => {\r\n    const response1 = await axios.get(`https://api.github.com/users/${name}/repos`);\r\n  \r\n    dispatch({\r\n      type:ADD_REPO ,\r\n      data1: response1.data,\r\n    });\r\n    console.log(response1.data)\r\n    const arr=response1.data.map((item:any)=>item.name )\r\n    for(let i=0;i< arr.length;i++){\r\n      dispatch(getRepoLanguage(name,arr[i],i));\r\n    }\r\n   \r\n  }\r\n;\r\n export const getContributionsData = (name: string) => async (dispatch: any) => {\r\n  const responseContributions = await axios.get(\r\n    `https://github-contributions-api.now.sh/v1/${name}`\r\n  );\r\n  const contributionData = responseContributions.data.years;\r\n  dispatch({\r\n    type: CONTRIBUTION_DATA,\r\n    data2: contributionData,\r\n  });\r\n  // console.log(contributionData);\r\n\r\n};\r\nconst arrlang :any[]=[];\r\nexport const getRepoLanguage = (name: string,repoName: string,i:number) => async (dispatch: any) =>{\r\n  const responseLanguage = await axios.get(\r\n`https://api.github.com/repos/${name}/${repoName}/languages`\r\n  );\r\n  // console.log(repoName)\r\n  // console.log(responseLanguage.data)\r\n  arrlang[i]=responseLanguage.data\r\n  dispatch({\r\n    type: REPO_LANGUAGE,\r\n    data3: arrlang,\r\n    \r\n  });\r\n  // console.log(arrlang)\r\n  // console.log(\"arati\")\r\n  // console.log(responseLanguage.data)\r\n\r\n  \r\n  \r\n};","export const FETCH_USER_DETAILS = \"FETCH_USER_DETAILS\";\r\nexport const FETCH_USER_NAME = \"FETCH_USER_NAME\";\r\nexport const ADD_REPO = \"ADD_REPO\";\r\nexport const CONTRIBUTION_DATA =\"CONTRIBUTION_DATA\";\r\nexport const REPO_LANGUAGE =\"REPO_LANGUAGE\";\r\nexport interface fetchNameAction{\r\n    type: typeof FETCH_USER_NAME;\r\n    name:string;\r\n}\r\nexport interface fetchDetailsAction{\r\n    type: typeof FETCH_USER_DETAILS\r\n    data:any;\r\n    // login:string;\r\n    // avatar_url:string;\r\n    // name:string;\r\n    // email:string\r\n}\r\nexport interface fetchRepoAction{\r\n    type: typeof ADD_REPO;\r\n    data1:any;\r\n}\r\nexport interface fetchContributionData{\r\n    type: typeof CONTRIBUTION_DATA;\r\n    data2:any;\r\n\r\n}\r\nexport interface fetchRepoLanguage{\r\n    type: typeof REPO_LANGUAGE;\r\n    data3:any;\r\n}\r\nexport type detailsAction = fetchDetailsAction|fetchNameAction|fetchRepoAction|fetchContributionData|fetchRepoLanguage;\r\nexport type appAction = detailsAction;","import { connect } from \"react-redux\";\r\nimport React from \"react\";\r\nimport * as actionCreator from \"../redux/DetailsAction\";\r\nimport \"../App.css\";\r\nimport { appState } from \"../redux/store\";\r\nimport {Pie} from 'react-chartjs-2';\r\nimport { valueData } from \"../types/value\";\r\n\r\n\r\ntype InputEvent = React.ChangeEvent<HTMLTextAreaElement>;\r\ntype FormEvent= React.FormEvent<HTMLFormElement>;\r\ninterface dispatchProps{\r\n  getName: (event:InputEvent)=>any,\r\n  getData:(value:string)=>any,\r\n  getRepo:(value:string)=>any,\r\n  getContributionsData:(value:string)=>any,\r\n\r\n  }\r\n type Props=dispatchProps&valueData\r\nfunction Details(props:Props) {\r\n  const handleChange = (event:InputEvent) => {\r\n    props.getName(event);\r\n  };\r\n  const handleOnClick = (event:FormEvent) => {\r\n    event.preventDefault();\r\n    props.getData(props.value);\r\n    props.getRepo(props.value);\r\n    props.getContributionsData(props.value);\r\n    \r\n  };\r\n    \r\n  \r\nconst state = {\r\n  labels:props.contributionData.map((value:any)=>(value.year)),\r\n  datasets: [\r\n    {\r\n      label: props.contributionData.map((value:any)=>(value.year)),\r\n      backgroundColor: [\r\n        '#B21F00',\r\n        '#C9DE00',\r\n        '#2FDE00',\r\n        '#00A6B4',\r\n        '#6800B4'\r\n      ],\r\n      hoverBackgroundColor: [\r\n      '#501800',\r\n      '#4B5000',\r\n      '#175000',\r\n      '#003350',\r\n      '#35014F'\r\n      ],\r\n      data: props.contributionData.map((value:any)=>(value.total))\r\n    }\r\n  ]\r\n }\r\n \r\nlet state1:any[]=[];\r\nfor(let i=0;i<props.repoLanguageData.length;i++){\r\nstate1[i] ={\r\n  labels:Object.keys(props.repoLanguageData[i]),\r\n  datasets: [\r\n    {\r\n      labels:Object.keys(props.repoLanguageData[i]) ,\r\n      backgroundColor: [\r\n        '#B21F00',\r\n        '#C9DE00',\r\n        '#2FDE00',\r\n        '#00A6B4',\r\n        '#6800B4'\r\n      ],\r\n      hoverBackgroundColor: [\r\n      '#501800',\r\n      '#4B5000',\r\n      '#175000',\r\n      '#003350',\r\n      '#35014F'\r\n      ],\r\n      data: Object.values(props.repoLanguageData[i])\r\n    } \r\n  ]\r\n}\r\n}\r\nconst state2 = {\r\n  labels: [\"Followers\", \"Following\"],\r\n  datasets: [\r\n    {\r\n      backgroundColor: [\"#0074D9\", \"#FF4136\"],\r\n      data: [props.followers, props.following],\r\n    },\r\n  ],\r\n};\r\n  return (  \r\n    \r\n    <div>\r\n      <div className=\"search-box\">\r\n      <h1 className=\"Heading\">Github User Details</h1>\r\n      <form onSubmit={handleOnClick}>\r\n        <label className=\"label\">enter the user id:</label>\r\n        <textarea\r\n          className=\"text-area\"\r\n          value={props.value}\r\n          onChange={handleChange}\r\n        />\r\n        <input className=\"submit-button\" type=\"submit\" value=\"fetch details\" />\r\n      </form>\r\n      </div>\r\n      <div className=\"display-box\">\r\n        <img className=\"photo\" src={props.src} alt=\"\"></img>\r\n        <div className=\"name-box\"><div className=\"user-name\"> {props.username}</div>\r\n        <div className=\"full-name\">{props.fullname}</div></div>\r\n        <div className=\"details-box\">\r\n        <div className=\"email\">Email: {props.email}</div>\r\n        <div className=\"repository\">No of Repository: {props.repo.length}</div>\r\n        <div className=\"followers\">Followers: {props.followers}</div>\r\n        <div className=\"following\">Following: {props.following}</div>\r\n        <div>Bio: {props.bio}</div>\r\n        <div>Location: {props.location}</div>\r\n        <div>Company: {props.company}</div></div>\r\n{/* {console.log(props.bio)} */}\r\n  </div>\r\n     \r\n        <div className=\"graph1\">\r\n          <div className=\"contr-graph\">\r\n          \r\n         <Pie \r\n          data={state}\r\n          options={{\r\n            title:{\r\n              display:true,\r\n              text:'No of Contribution Per Year',\r\n              fontSize:20\r\n            },\r\n            legend:{\r\n              display:true,\r\n              position:'right'\r\n            }\r\n          }}\r\n        /></div>\r\n  \r\n  <div className=\"follow-graph\">\r\n            <Pie\r\n          data={state2}\r\n          options={{\r\n            title:{\r\n              display:true,\r\n              text:'No of followers v/s No of following',\r\n              fontSize:20\r\n            },\r\n            legend:{\r\n              display:true,\r\n              position:'right'\r\n            }\r\n          }}\r\n        /></div></div>\r\n              <div className=\"repo\">\r\n        <h3 >Repository Details:</h3></div>\r\n        <div className=\"repo-data\">{props.repo.map((repo: any ,index)=>(\r\n          <div className=\"r\">\r\n          <li key={index}> \r\n          <a href={repo.html_url}>{repo.name}</a>\r\n          <h3> {repo.description}</h3>\r\n        <h3>forks: {repo.forks_count}</h3>\r\n        <h3>stars: {repo.stargazers_count}</h3>\r\n\r\n        \r\n      </li>\r\n      \r\n      </div>\r\n        ))}\r\n        </div>\r\n            <div className =\"repo-graph\">\r\n        {state1.map((value:any,index:any)=>(\r\n          <div className=\"graph\">\r\n          <li key={index}>\r\n             <Pie \r\n                data={value}\r\n              \r\n                options={{\r\n                title:{\r\n                        display:true,\r\n                        text:'Repositary Language',\r\n                        fontSize:20\r\n                      },\r\n                legend:{\r\n                        display:true,\r\n                        position:'right'\r\n                      }\r\n            \r\n                } \r\n                }\r\n                \r\n            />\r\n            </li></div>))}</div>\r\n      </div>\r\n \r\n      \r\n    \r\n  );\r\n}\r\n\r\n\r\nconst mapDispatchToProps ={\r\n  \r\n     getName: (event:InputEvent) => (actionCreator.getName(event.target.value)),\r\n     getData: (name:string) => (actionCreator.getData(name)),\r\n     getRepo: (name:string) => (actionCreator.getRepo(name)),\r\n     getContributionsData:(name:string) => (actionCreator.getContributionsData(name)),\r\n  \r\n\r\n};\r\nconst mapStateToProps = (state:appState) => {\r\n  return {\r\n    value: state.value,\r\n    username: state.username,\r\n    src: state.src,\r\n    email: state.email,\r\n    fullname: state.fullname,\r\n    repo: state.repo,\r\n    data: state.data,\r\n    contributionData :state.contributionData,\r\n    followers :state.followers,\r\n    following :state.following,\r\n    repoLanguageData: state.repoLanguageData,\r\n    company:state.company,\r\n    bio:state.bio,\r\n    location:state.location,\r\n   \r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Details);\r\n","import { FETCH_USER_DETAILS, FETCH_USER_NAME,ADD_REPO,CONTRIBUTION_DATA,REPO_LANGUAGE} from \"../types/details\";\r\nimport {valueData} from \"../types/value\";\r\nimport {appAction} from \"../types/details\";\r\nimport { act } from \"@testing-library/react\";\r\nconst initialState: valueData = {\r\n  value: \"\",\r\n  data: [],\r\n  username: \"\",\r\n  src: \"\",\r\n  email: \"\",\r\n  fullname: \"\",\r\n  repo: [],\r\n  contributionData:[],\r\n  followers:0,\r\n  following:0,\r\n  repoLanguageData:[],\r\n  company:\"\",\r\n    bio:\"\",\r\n    location:\"\",\r\n    \r\n};\r\n\r\nconst reducer = (state = initialState, action:appAction):valueData => {\r\n  switch (action.type) {\r\n    case FETCH_USER_NAME:\r\n      return {\r\n        ...state,\r\n        value: action.name,\r\n      };\r\n    case FETCH_USER_DETAILS:\r\n      return {\r\n        ...state,\r\n        username: action.data.login,\r\n        src: action.data.avatar_url,\r\n        email: action.data.email,\r\n        fullname: action.data.name,\r\n        followers: action.data.followers,\r\n        following: action.data.following,\r\n       location:action.data.location,\r\n       bio:action.data.bio,\r\n       company:action.data.company,\r\n\r\n      };\r\n      case ADD_REPO:\r\n        return{\r\n          ...state,\r\n          repo:action.data1,\r\n          // data:action.data1.data.name\r\n        }\r\n        case CONTRIBUTION_DATA:\r\n          return{\r\n            ...state,\r\n            contributionData:action.data2,\r\n          }\r\n          case REPO_LANGUAGE:\r\n            return{\r\n              ...state,\r\n              repoLanguageData:action.data3,\r\n            \r\n\r\n            }\r\n    default:\r\n      return state;\r\n\r\n  }\r\n};\r\nexport default reducer;\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport reducer from \"./reducer\";\r\nimport thunk, { ThunkMiddleware } from \"redux-thunk\";\r\nimport { appAction } from \"../types/details\";\r\nexport type appState = ReturnType<typeof reducer>\r\nconst store = createStore(reducer, applyMiddleware(thunk as ThunkMiddleware<appState,appAction>));\r\n\r\nexport default store;\r\n","// import React, { Component } from 'react';\r\n// import './App.css';\r\n// import axios from 'axios';\r\n\r\n//  class App extends Component {\r\n//    constructor(props) {\r\n//      super(props)\r\n\r\n//      this.state = {\r\n//         value: '',\r\n//         data:'',\r\n//         username:'',\r\n//         src:'',\r\n//         email:'',\r\n//         fullname:''\r\n//      }\r\n//      this.handleChange = this.handleChange.bind(this);\r\n//      this.handleSubmit = this.handleSubmit.bind(this);\r\n//    }\r\n\r\n//    handleChange(event)\r\n//     {\r\n//       this.setState({value: event.target.value});\r\n//     }\r\n//     async handleSubmit(event)\r\n//       {\r\n//         event.preventDefault();\r\n//         // const axios = require('axios');\r\n//         const response = await axios.get(`https://api.github.com/users/${this.state.value}`);\r\n//         this.setState({data:response,});\r\n//         this.setState({username:this.state.data.data.login,\r\n//         src:this.state.data.data.avatar_url,\r\n//         email:this.state.data.data.email,\r\n//         fullname:this.state.data.data.name});\r\n//      }\r\n\r\n//   render() {\r\n//     return (\r\n//       <div>\r\n//         <h1 className=\"Heading\">Github User Details</h1>\r\n//         <form onSubmit={this.handleSubmit}>\r\n//           <label className=\"label\">enter the user id:</label>\r\n//           <textarea className=\"text-area\"  value={this.state.value} onChange={this.handleChange}/>\r\n//           <input className=\"submit-button\" type=\"submit\" value=\"fetch details\" />\r\n//         </form>\r\n//         <div className=\"display-box\">\r\n//             <img className=\"photo\" src={this.state.src} alt=''></img>\r\n//             <h3>{this.state.username}</h3>\r\n//             <h3>{this.state.fullname}</h3>\r\n//             <h3>{this.state.email}</h3>\r\n//          </div>\r\n\r\n//       </div>\r\n//     )\r\n//   }\r\n// }\r\n\r\n// export default App\r\nimport React, { Component } from \"react\";\r\nimport Details from \"./components/Details\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./redux/store\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Provider store={store}>\r\n        <div>\r\n    <Details />\r\n        </div>\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}